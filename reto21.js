/*
DIFICULTAD: üü¢
Santa Claus üéÖ est√° decorando un √°rbol de Navidad m√°gico ü™Ñ, que este a√±o tiene una estructura especial en forma de √°rbol binario. Cada nodo del √°rbol representa un regalo, y Santa quiere saber la altura del √°rbol para colocar la estrella m√°gica en la punta.

Tu tarea es escribir una funci√≥n que calcule la altura de un √°rbol binario. La altura de un √°rbol binario se define como el n√∫mero m√°ximo de niveles desde la ra√≠z hasta una hoja. Un √°rbol vac√≠o tiene una altura de 0.
*/

/**
 * SCORE: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
 * @param {{ value: string; left: any; right: any }} tree
 * @returns {number} - Height of the tree.
 */
function treeHeight(tree) {
    return tree ? treeHeight(tree.left) + 1 : 0;
}

// Definici√≥n del √°rbol
const tree = {
    value: 'üéÅ',
    left: {
        value: 'üéÑ',
        left: {
            value: '‚≠ê',
            left: null,
            right: null
        },
        right: {
            value: 'üéÖ',
            left: null,
            right: null
        }
    },
    right: {
        value: '‚ùÑÔ∏è',
        left: null,
        right: {
            value: 'ü¶å',
            left: null,
            right: null
        }
    }
};

// Representaci√≥n gr√°fica del √°rbol:
//        üéÅ
//       /   \
//     üéÑ     ‚ùÑÔ∏è
//    /  \      \
//  ‚≠ê   üéÖ      ü¶å

// Llamada a la funci√≥n
const result = treeHeight(tree);
console.log(result);
// Devuelve: 3

const tree2 = null;
console.log(treeHeight(null));

// SCORE: ‚≠ê
function treeHeight2(tree) {
    let height = 0;

    let hasChildren = tree => {
        height++;
        if (tree?.left) {
            hasChildren(tree.left);
        }
    };

    if (tree) {
        hasChildren(tree);
    }
    return height;
}

// ‚≠ê‚≠ê‚≠ê
function treeHeight3(tree) {
    let height = 0;
    function hasChildren(tree) {
        if (tree) {
            height++;
        }
        if (tree?.left) {
            hasChildren(tree.left);
        }
    }
    hasChildren(tree);

    return height;
}

// ‚≠ê‚≠ê‚≠ê‚≠ê
function treeHeight4(tree) {
    let height = 0;
    function hasChildren(tree) {
        if (tree) {
            height++;
            hasChildren(tree.left);
        }
    }
    hasChildren(tree);

    return height;
}
