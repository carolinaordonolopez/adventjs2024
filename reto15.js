/* DIFICULTAD: üü¢
Al Polo Norte ha llegado ChatGPT y el elfo Sam Elfman est√° trabajando en una aplicaci√≥n de administraci√≥n de regalos y ni√±os.

Para mejorar la presentaci√≥n, quiere crear una funci√≥n drawTable que reciba un array de objetos y lo convierta en una tabla de texto.

La tabla dibujada debe representar los datos del objeto de la siguiente manera:

Tiene una cabecera con el nombre de la columna.
El nombre de la columna pone la primera letra en may√∫scula.
Cada fila debe contener los valores de los objetos en el orden correspondiente.
Cada valor debe estar alineado a la izquierda.
Los campos dejan siempre un espacio a la izquierda.
Los campos dejan a la derecha el espacio necesario para alinear la caja.
*/

/**
 * SCORE: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
 * @param {Array<Object>} data
 * @returns {string}
 */
function drawTable(data) {
    const columnNames = Object.keys(data[0]);
    const columnsMaxLengthInOrder = [];

    let horizontalLine = '';
    let headerLine = '';
    const valuesLines = [];
    columnNames.forEach(columnName => {
        const maxLength = Math.max(columnName.length, ...data.map(item => item[columnName].toString().length));
        columnsMaxLengthInOrder.push(maxLength);
        columnName = columnName.charAt(0).toUpperCase() + columnName.slice(1);
        horizontalLine += `+${'-'.padEnd(maxLength + 2, '-')}`;
        headerLine += `| ${columnName.padEnd(maxLength + 1, ' ')}`;
    });
    horizontalLine += '+';
    headerLine += '|';

    data.forEach(dataItem => {
        const row = columnNames
            .map((columnName, i) => dataItem[columnName].toString().padEnd(columnsMaxLengthInOrder[i], ' '))
            .join(' | ');
        valuesLines.push(`| ${row} |`);
    });

    return [horizontalLine, headerLine, horizontalLine, ...valuesLines, horizontalLine].join('\n');
}

const result = drawTable([
    { name: 'Alice', city: 'London' },
    { name: 'Bob', city: 'Paris' },
    { name: 'Charlie', city: 'New York' }
]);
console.log(result);

// +---------+-----------+
// | Name    | City      |
// +---------+-----------+
// | Alice   | London    |
// | Bob     | Paris     |
// | Charlie | New York  |
// +---------+-----------+

const result2 = drawTable([
    { gift: 'Doll', quantity: 10 },
    { gift: 'Book', quantity: 5 },
    { gift: 'Music CD', quantity: 1 }
]);
console.log(result2);

// +----------+----------+
// | Gift     | Quantity |
// +----------+----------+
// | Doll     | 10       |
// | Book     | 5        |
// | Music CD | 1        |
// +----------+----------+

/** ‚≠ê‚≠ê‚≠ê‚≠ê
 * @param {Array<Object>} data
 * @returns {string}
 */
function drawTable1(data) {
    // Code here
    const columnNames = Object.keys(data[0]); /* .map(name => name.charAt(0).toUpperCase() + name.slice(1)) */
    let columns = [];
    columnNames.forEach((columnName, i) => {
        columns.push({
            header: columnName.charAt(0).toUpperCase() + columnName.slice(1),
            values: [],
            maxLength: columnName.length
        });
        // TODO: Se esta recorriendo 3 veces, deberia solo 1
        data.forEach(data => {
            columns[i].values.push(data[columnName].toString());
        });
    });

    let horizontalLine = '';
    let headerLine = '';
    let valueLine = '';
    let valuesLines = {};
    columns.forEach((column, i) => {
        column.maxLength = Math.max(column.maxLength, ...column.values.map(v => v.length));

        horizontalLine += '+' + '-'.padEnd(column.maxLength + 2, '-');
        headerLine += '| ' + column.header.padEnd(column.maxLength + 1, ' ');
        column.values.forEach((value, i) => {
            valuesLines[i] ??= [];
            valuesLines[i].push(value);
        });
    });
    Object.values(valuesLines).forEach((valLine, i) => {
        valLine.forEach((val, idx) => {
            valueLine += '| ' + val.padEnd(columns[idx].maxLength + 1, ' ');
        });
        valueLine += '|\n';
    });
    horizontalLine += '+\n';
    headerLine += '|\n';

    return horizontalLine + headerLine + horizontalLine + valueLine + horizontalLine.trim();
}

// ‚≠ê‚≠ê‚≠ê‚≠ê
function drawTable2(data) {
    const columnNames = Object.keys(data[0]); /* .map(name => name.charAt(0).toUpperCase() + name.slice(1)) */
    let rowsValues = [];
    let columnsMaxLengthInOrder = [];

    data.forEach((data, i) => {
        const values = Object.values(data).map(data => data.toString());
        rowsValues[i] = values;
    });

    let horizontalLine = '';
    let headerLine = '';
    let valuesLines = '';
    columnNames.forEach(columnName => {
        const maxLength = Math.max(columnName.length, ...data.map(item => item[columnName].toString().length));
        columnsMaxLengthInOrder.push(maxLength);
        columnName = columnName.charAt(0).toUpperCase() + columnName.slice(1);
        horizontalLine += '+' + '-'.padEnd(maxLength + 2, '-');
        headerLine += '| ' + columnName.padEnd(maxLength + 1, ' ');
    });

    rowsValues.forEach(row => {
        row.forEach((item, i) => {
            valuesLines += '| ' + item.padEnd(columnsMaxLengthInOrder[i] + 1, ' ');
        });
        valuesLines += '|\n';
    });
    horizontalLine += '+\n';
    headerLine += '|\n';

    return horizontalLine + headerLine + horizontalLine + valuesLines + horizontalLine.trim();
}

/**
 * @param {Array<Object>} data
 * @returns {string}
 */
function drawTable3(data) {
    // Code here
    const columnNames = Object.keys(data[0]); /* .map(name => name.charAt(0).toUpperCase() + name.slice(1)) */
    let columnsMaxLengthInOrder = [];

    let horizontalLine = '';
    let headerLine = '';
    let valuesLines = '';
    columnNames.forEach(columnName => {
        const maxLength = Math.max(columnName.length, ...data.map(item => item[columnName].toString().length));
        columnsMaxLengthInOrder.push(maxLength);
        columnName = columnName.charAt(0).toUpperCase() + columnName.slice(1);
        horizontalLine += '+' + '-'.padEnd(maxLength + 2, '-');
        headerLine += '| ' + columnName.padEnd(maxLength + 1, ' ');
    });

    data.forEach(dataItem => {
        const row = columnNames
            .map((columnName, i) => dataItem[columnName].toString().padEnd(columnsMaxLengthInOrder[i], ' '))
            .join(' | ');
        valuesLines += `| ${row} |\n`;
    });
    horizontalLine += '+\n';
    headerLine += '|\n';

    return horizontalLine + headerLine + horizontalLine + valuesLines + horizontalLine.trim();
}

//‚≠ê‚≠ê‚≠ê‚≠ê(Es el mismo que drawTable5 pero este me da 4 estrellas, por el formateo de prettier)
function drawTable4(data) {
    const headers = Object.keys(data[0]);
    const maxLengths = headers.map(header =>
        Math.max(header.length, ...data.map(dataItem => `${dataItem[header]}`.length))
    );

    const horizontalLine = `+${maxLengths.map(lenght => '-'.repeat(lenght + 2)).join('+')}+`;
    const headerLine = `| ${headers
        .map((header, i) => {
            const headerFormatted = header.charAt(0).toUpperCase() + header.slice(1);
            return headerFormatted.padEnd(maxLengths[i]);
        })
        .join(' | ')} |`;

    const valuesLines = data.map(
        dataItem => `| ${headers.map((header, i) => `${dataItem[header]}`.padEnd(maxLengths[i])).join(' | ')} |`
    );

    return [horizontalLine, headerLine, horizontalLine, ...valuesLines, horizontalLine].join('\n');
}

// ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
// prettier-ignore
function drawTable5(data) {
    // Code here
    const headers = Object.keys(data[0]);

    const maxLengths = headers.map(header =>
        Math.max(header.length, ...data.map(dataItem => `${dataItem[header]}`.length))
    );

    const horizontalLine = `+${maxLengths.map(length => '-'.repeat(length + 2)).join('+')}+`;

    const headerLine = `| ${headers
        .map((header, i) => {
            const headerFormatted = header.charAt(0).toUpperCase() + header.slice(1);
            return headerFormatted.padEnd(maxLengths[i]);
        })
        .join(' | ')} |`;

    const valuesLines = data.map(
        dataItem => `| ${headers.map((key, i) => `${dataItem[key]}`.padEnd(maxLengths[i])).join(' | ')} |`
    );

    return [horizontalLine, headerLine, horizontalLine, ...valuesLines, horizontalLine].join('\n');
}
